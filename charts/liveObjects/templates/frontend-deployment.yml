
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.frontend.metadata.name }}
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.Version }}
    app.kubernetes.io/appVersion: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: secret
    app.kubernetes.io/helm-application: {{ .Release.Name }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/track: {{ .Values.global.labels.track | quote }}
spec:
  replicas: {{ .Values.deployment.frontend.spec.replicas }}
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      volumes:
      - name: tls-keys-volume
        configMap:
           name: tls-keys
      containers:
      - name: frontend
        image: {{ .Values.deployment.frontend.container.registry }}:{{ .Values.deployment.frontend.container.tag }}
        imagePullPolicy: {{ .Values.deployment.frontend.container.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.deployment.frontend.container.resources.requests.cpu }}
            memory: {{ .Values.deployment.frontend.container.resources.requests.memory }}
        ports:
        - containerPort: {{ .Values.deployment.frontend.container.ports.containerPort }}
        env:
        - name: SERVICE_HOST
          value: "{{ .Values.services.backend.metadata.name }}"
        - name: SERVICE_PORT
          value: "{{ .Values.services.backend.spec.ports.targetPort }}"
        - name: LEARN_HOST
          value: "{{ .Values.services.learn.metadata.name }}"
        - name: LEARN_PORT
          value: "{{ .Values.services.learn.spec.ports.targetPort }}"
        - name: LICENSE_HOST
          value: "{{ .Values.services.license.metadata.name }}"
        - name: LICENSE_PORT
          value: "{{ .Values.services.license.spec.ports.targetPort }}"
        - name: NODE_ENV
          value: "production"
        - name:  TLS_CERT_PROVIDED
          value: "{{ .Values.tls_cert_provided }}"
        volumeMounts:
        - name: tls-keys-volume # configMaps
          mountPath: /opt/node/keys/tls
      imagePullSecrets:
      - name: {{ .Values.secrets.registry.imagePullSecrets }}




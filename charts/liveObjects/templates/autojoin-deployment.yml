apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Values.deployment.autojoin.metadata.name }}
  labels:
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.Version }}
    app.kubernetes.io/appVersion: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: secret
    app.kubernetes.io/helm-application: {{ .Release.Name }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/track: {{ .Values.global.labels.track | quote }}
spec:
  replicas: {{ .Values.deployment.autojoin.spec.replicas }}
  selector:
    matchLabels:
      app: autojoin
  template:
    metadata:
      labels:
        app: autojoin
    spec:
      volumes:
      {{- if .Values.persistence.enabled }}
        {{- if .Values.persistence.autojoin.logs.enabled }}
      - name: logs-persistent-storage
          {{- if eq .Values.persistence.autojoin.logs.volumeType "hostPath"}}
        hostPath:
          path: {{ .Values.persistence.autojoin.logs.hostPath }}
          {{- end}}
          {{- if eq .Values.persistence.autojoin.logs.volumeType "persistentVolumeClaim"}}
        persistentVolumeClaim:
          claimName: {{ .Release.Namespace }}-autojoin-logs-volumeclaim
          {{- end }}
        {{- end }}
      {{- end }}
      containers:
      - name: autojoin
        image: {{ .Values.deployment.autojoin.container.registry }}:{{ .Values.deployment.autojoin.container.tag }}
        imagePullPolicy: {{ .Values.deployment.autojoin.container.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.deployment.autojoin.container.resources.requests.cpu }}
            memory: {{ .Values.deployment.autojoin.container.resources.requests.memory }}
        command:
        - gunicorn
        - --workers=2
        - --worker-tmp-dir
        - /dev/shm
        - --config=gunicorn_config.py
        - --bind
        - 0.0.0.0:5002
        - wsgi:APP
        ports:
        - containerPort: {{ .Values.deployment.autojoin.container.ports.containerPort }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-env
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-{{ template "postgresql.secretName" . }}
              key: password
        - name: FLASK_APP
          value: "server.py"
        - name: FLASK_ENV
          value: "production"
        - name:  AUTOJOIN_LOGGING_LOCATION
          value: "STDOUT"
        - name: DB_HOST
          value: "{{ .Release.Name }}-{{ .Values.services.postgres.metadata.name }}"
        volumeMounts:
        {{- if .Values.persistence.enabled }}
          {{- if .Values.persistence.autojoin.logs.enabled }}
        - name: logs-persistent-storage
          mountPath: /mnt/logs
          {{- end }}
        {{- end }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-{{ .Values.secrets.registry.imagePullSecrets }}

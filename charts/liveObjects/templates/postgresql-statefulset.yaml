---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgresql
  labels: &PostgreSQLLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: postgresql-server
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.Version }}
    app.kubernetes.io/appVersion: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: secret
    app.kubernetes.io/helm-application: {{ .Release.Name }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/track: {{ .Values.global.labels.track | quote }}

spec:
  replicas: 1
  selector:
    matchLabels: *PostgreSQLLabels
  serviceName: {{ .Release.Name }}-postgresql-svc
  template:
    metadata:
      labels: *PostgreSQLLabels
    spec:
      containers:
      - name: postgresql
        image: {{ .Values.postgresql.image }}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: {{ .Release.Name }}-postgresql-pvc
          mountPath: /var/lib/postgresql/data
        {{- if or (.Files.Glob "files/docker-entrypoint-initdb.d/*.{sh,sql,sql.gz}") .Values.initdbScriptsConfigMap .Values.initdbScripts }}
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        {{- end }}
        env:
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-{{ template "postgresql.secretName" . }}
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-{{ template "postgresql.secretName" . }}
              key: password
      - name: prometheus-exporter
        image: {{ .Values.postgresql.exporter.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: 9187
          name: exporter
        env:
        - name: "DATA_SOURCE_URI"
          value: "localhost:5432/postgres?sslmode=disable"
        - name: "DATA_SOURCE_USER"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-{{ template "postgresql.secretName" . }}
              key: username
        - name: "DATA_SOURCE_PASS"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-{{ template "postgresql.secretName" . }}
              key: password
      {{- if .Values.metrics.exporter.enabled }}
      - name: stackdriver-exporter
        image: {{ .Values.metrics.image }}
        ports:
        - name: profiler
          containerPort: 6060
        command:
        - /monitor
        - --stackdriver-prefix=custom.googleapis.com
        - --source=postgresql:http://localhost:9187/metrics
        - --pod-id=$(POD_NAME)
        - --namespace-id=$(POD_NAMESPACE)
        - --monitored-resource-types=k8s
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{- end }}
      volumes:
      {{- if  or (.Files.Glob "files/docker-entrypoint-initdb.d/*.{sh,sql,sql.gz}") .Values.initdbScriptsConfigMap .Values.initdbScripts }}
      - name: custom-init-scripts
        configMap:
          name: {{ .Release.Name }}-lo-init-scripts
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-postgresql-pvc
      labels: *PostgreSQLLabels
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode }}
      storageClassName: {{ .Values.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.postgresql.persistence.size }}
